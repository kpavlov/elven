package me.kpavlov.langchain4j

import dev.langchain4j.data.message.AiMessage.aiMessage
import dev.langchain4j.data.message.UserMessage
import dev.langchain4j.model.chat.ChatModel
import dev.langchain4j.model.chat.request.ChatRequest
import dev.langchain4j.model.chat.response.ChatResponse
import java.util.concurrent.ConcurrentHashMap

private val genericResponses =
    arrayOf(
        "Интересно.",
        "Трудно сказать.",
        "Это сложный вопрос.",
        "Нужно подумать.",
        "Это возможно.",
        "Подумаем об этом.",
        "Я не уверен.",
        "Может быть.",
    )

/**
 * LangChain4J ChatLanguageModel providing expected response to expected request.
 * Expected requests can be added dynamically. Follow wiremock interface
 */
class MockChatLanguageModel : ChatModel {
    private val expectedResponses = ConcurrentHashMap<String, String>()

    /**
     * Generates a response from the model based on a sequence of messages.
     * Typically, the sequence contains messages in the following order:
     * System (optional) - User - AI - User - AI - User ...
     *
     * @param messages A list of messages.
     * @return The response generated by the model.
     */
    override fun chat(chatRequest: ChatRequest): ChatResponse {
        val messages = chatRequest.messages()
        val lastUserMessage = messages.filterIsInstance<UserMessage>().lastOrNull()
        val builder = ChatResponse.builder()
        if (lastUserMessage != null) {
            Thread.sleep(500)
            val responseText = expectedResponses[lastUserMessage.singleText()] ?: genericResponses.random()
            builder.aiMessage(aiMessage(responseText))
        } else {
            builder.aiMessage(aiMessage("No user message found"))
        }
        return builder.build()
    }

    /**
     * Adds an expected response for a given user request.
     * @param request The user request.
     * @param response The expected response.
     */
    fun addExpectedResponse(
        request: String,
        response: String,
    ) {
        expectedResponses[request] = response
    }

    /**
     * Removes an expected response for a given user request.
     * @param request The user request.
     */
    fun removeExpectedResponse(request: String) {
        expectedResponses.remove(request)
    }

    /**
     * Clears all the expected responses.
     */
    fun clearExpectedResponses() {
        expectedResponses.clear()
    }
}
